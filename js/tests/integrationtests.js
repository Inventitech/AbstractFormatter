module( "Integration tests" );

test('MSR Abstract from PDF', function() {
    var input = 'Code review is the manual assessment of source code by humans,\nmainly intended to identify defects and quality problems. Modern\nCode Review (MCR), a lightweight variant of the code inspections\ninvestigated since the 1970s, prevails today both in industry and\nopen-source software (OSS) systems. The objective of this paper is\nto increase our understanding of the practical benefits that the MCR\nprocess produces on reviewed source code. To that end, we empiri-\ncally explore the problems fixed through MCR in OSS systems. We\nmanually classified over 1,400 changes taking place in reviewed\ncode from two OSS projects into a validated categorization scheme.\nSurprisingly, results show that the types of changes due to the MCR\nprocess in OSS are strikingly similar to those in the industry and\nacademic systems from literature, featuring the similar 75:25 ratio\nof maintainability-related to functional problems. We also reveal\nthat 7–35% of review comments are discarded and that 10–22%\nof the changes are not triggered by an explicit review comment.\nPatterns emerged in the review data; we investigated them revealing\nthe technical factors that influence the number of changes due to the\nMCR process. We found that bug-fixing tasks lead to fewer changes\nand tasks with more altered files and a higher code churn have more\nchanges. Contrary to intuition, the person of the reviewer had no\nimpact on the number of changes.';
    var expected = 'Code review is the manual assessment of source code by humans, mainly intended to identify defects and quality problems. Modern Code Review (MCR), a lightweight variant of the code inspections investigated since the 1970s, prevails today both in industry and open-source software (OSS) systems. The objective of this paper is to increase our understanding of the practical benefits that the MCR process produces on reviewed source code. To that end, we empirically explore the problems fixed through MCR in OSS systems. We manually classified over 1,400 changes taking place in reviewed code from two OSS projects into a validated categorization scheme. Surprisingly, results show that the types of changes due to the MCR process in OSS are strikingly similar to those in the industry and academic systems from literature, featuring the similar 75:25 ratio of maintainability-related to functional problems. We also reveal that 7–35% of review comments are discarded and that 10–22% of the changes are not triggered by an explicit review comment. Patterns emerged in the review data; we investigated them revealing the technical factors that influence the number of changes due to the MCR process. We found that bug-fixing tasks lead to fewer changes and tasks with more altered files and a higher code churn have more changes. Contrary to intuition, the person of the reviewer had no impact on the number of changes.';
    equal(formatText(input), expected, 'Test on MSR Abstract (PDF)');
});

test('Abstract Master\'s Thesis TK', function() {
    var input = '% Abstract\n\\chapter*{Abstract}\nResearch in software engineering has shown that the reuse of software components reduces bugs, improves code quality and decreases development time.\nIn the past many code search systems have been proposed to help developers find code that is suitable for reuse in large code bases. Today large companies see several commits to their software repositories every minute and developers expect information they rely on to be up to date. This creates the need for a novel approach of analyzing the code base and keeping the code search engine updated. The traditional approach to read the entire code base becomes difficult as updating takes longer than the time between two subsequent commits to the repository.\n%In the past many code search systems have been proposed to help developers find code that is suitable for reuse in large code bases. Today large companies see several commits to their software repositories every minute. This creates the need for a novel approach of analyzing the code base and keeping the code search engine updated. The traditional approach to read the entire code base becomes difficult as updating takes longer than the time between two subsequent commits to the repository.\nWhile other code search systems focus on text-based search or use test-cases to find suitable code for reuse, we build on the approach of using a method\'s context to find useful methods for reuse. We complement this approach with signature matching and techniques known from software engineering: architecture analysis and code review states of code. These are used as metrics to rate a method\'s suitability in a given context.\nThis thesis contributes a novel code search system designed for use with companies\' internal code bases. The proposed system uses an incremental approach to update its index, updating only parts of data affected by the changes in each commit. This keeps the analysis time low and allows the system to work with updated data in the matter of seconds.\nTo evaluate the proposed code search system a novel evaluation method is introduced that is built on the concept of incremental analysis. It enables the usage of a system\'s entire development history, accurately replaying the actual development process. The  system\'s state and the changes made at any given commit can be used to accurately evaluate the code search system using the data that would have been available at that time.\nThe evaluation shows that our code search system consistently delivers results containing the developers choice on two different systems in more than 50\% of the cases when retrieving 5 results. We evaluate all combinations of our proposed metrics and show which lead to the best results.';
    var expected = 'Abstract Research in software engineering has shown that the reuse of software components reduces bugs, improves code quality and decreases development time. In the past many code search systems have been proposed to help developers find code that is suitable for reuse in large code bases. Today large companies see several commits to their software repositories every minute and developers expect information they rely on to be up to date. This creates the need for a novel approach of analyzing the code base and keeping the code search engine updated. The traditional approach to read the entire code base becomes difficult as updating takes longer than the time between two subsequent commits to the repository. While other code search systems focus on text-based search or use test-cases to find suitable code for reuse, we build on the approach of using a method\'s context to find useful methods for reuse. We complement this approach with signature matching and techniques known from software engineering: architecture analysis and code review states of code. These are used as metrics to rate a method\'s suitability in a given context. This thesis contributes a novel code search system designed for use with companies\' internal code bases. The proposed system uses an incremental approach to update its index, updating only parts of data affected by the changes in each commit. This keeps the analysis time low and allows the system to work with updated data in the matter of seconds. To evaluate the proposed code search system a novel evaluation method is introduced that is built on the concept of incremental analysis. It enables the usage of a system\'s entire development history, accurately replaying the actual development process. The system\'s state and the changes made at any given commit can be used to accurately evaluate the code search system using the data that would have been available at that time. The evaluation shows that our code search system consistently delivers results containing the developers choice on two different systems in more than 50% of the cases when retrieving 5 results. We evaluate all combinations of our proposed metrics and show which lead to the best results.';
    equal(formatText(input), expected, 'Test on TK\'s Master\'s Thesis Abstract (Latex)');
});
